{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\EasyPG\\\\EASY-PG-main\\\\react-app\\\\src\\\\pg.js\";\nimport React, { Component } from 'react';\nimport FilterBar from './FilterBar';\nimport FilterModal from './FilterModal';\nimport PropertyCard from './PropertyCard';\nimport NoProperty from './NoProperty';\nimport { base_path } from './utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass pg extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      properties: [],\n      sort: \"none\",\n      filter: {\n        gender: \"none\"\n      }\n    };\n\n    this.toggleInterested = property_id => {\n      fetch(`${base_path}/api/toggle_interested.php?property_id=${property_id}`).then(response => response.json()).then(responseData => {\n        if (responseData.success) {\n          console.log('Success');\n          this.updateInterested(property_id);\n        } else if (!responseData.success && !responseData.is_logged_in) {\n          console.log('Not logged in!');\n          window.$(\"#login-modal\").modal(\"show\");\n        }\n      }).catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n    };\n\n    this.updateInterested = property_id => {\n      let updated_properties = [...this.state.properties];\n      updated_properties.forEach(property => {\n        if (property.id === property_id) {\n          property.is_interested = !property.is_interested;\n\n          if (property.is_interested) {\n            property.interested_users_count++;\n          } else {\n            property.interested_users_count--;\n          }\n        }\n      });\n      this.setState({\n        properties: updated_properties\n      });\n    };\n\n    this.updateSort = sort => {\n      this.setState({\n        sort: sort\n      });\n    };\n\n    this.updateFilter = gender => {\n      this.setState({\n        filter: {\n          gender: gender\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    const search = window.location.search; //return query string part of url including ?\n\n    const params = new URLSearchParams(search); //API to convert search query to object\n\n    const city_name = params.get('city');\n    fetch(`${base_path}/api/get_properties_by_city.php?city=${city_name}`) //API to fetch properties object it returns a promise\n    .then(response => response.json()) //response.json() is an api which parse the response to object . it also returns a promise\n    .then(responseData => {\n      this.setState({\n        properties: responseData\n      });\n    }).catch(error => {\n      console.log('Error fetching and parsing data', error);\n    });\n  }\n\n  render() {\n    let properties = [...this.state.properties]; // Sorting\n\n    if (this.state.sort !== \"none\") {\n      if (this.state.sort === \"desc\") {\n        properties.sort((a, b) => b.rent - a.rent);\n      } else {\n        properties.sort((a, b) => a.rent - b.rent);\n      }\n    } // Filter\n\n\n    if (this.state.filter.gender !== \"none\") {\n      properties = properties.filter(property => property.gender === this.state.filter.gender);\n    }\n\n    let property_cards;\n\n    if (properties.length > 0) {\n      property_cards = properties.map(property => /*#__PURE__*/_jsxDEV(PropertyCard, {\n        property: property,\n        toggleInterested: () => this.toggleInterested(property.id)\n      }, property.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this));\n    } else {\n      property_cards = /*#__PURE__*/_jsxDEV(NoProperty, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 30\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-container\",\n        children: [/*#__PURE__*/_jsxDEV(FilterBar, {\n          currentSort: this.state.sort,\n          updateSort: this.updateSort,\n          currentFilter: this.state.filter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), property_cards]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FilterModal, {\n        currentFilter: this.state.filter,\n        updateFilter: this.updateFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default pg;","map":{"version":3,"sources":["C:/xampp/htdocs/EasyPG/EASY-PG-main/react-app/src/pg.js"],"names":["React","Component","FilterBar","FilterModal","PropertyCard","NoProperty","base_path","pg","state","properties","sort","filter","gender","toggleInterested","property_id","fetch","then","response","json","responseData","success","console","log","updateInterested","is_logged_in","window","$","modal","catch","error","updated_properties","forEach","property","id","is_interested","interested_users_count","setState","updateSort","updateFilter","componentDidMount","search","location","params","URLSearchParams","city_name","get","render","a","b","rent","property_cards","length","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;;;;AAEA,MAAMC,EAAN,SAAiBN,SAAjB,CAA2B;AAAA;AAAA;AAAA,SAEvBO,KAFuB,GAEf;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,IAAI,EAAE,MAFF;AAGJC,MAAAA,MAAM,EAAE;AACJC,QAAAA,MAAM,EAAE;AADJ;AAHJ,KAFe;;AAAA,SA2BvBC,gBA3BuB,GA2BJC,WAAW,IAAI;AAC9BC,MAAAA,KAAK,CAAE,GAAET,SAAU,0CAAyCQ,WAAY,EAAnE,CAAL,CACKE,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,YAAY,IAAI;AAClB,YAAIA,YAAY,CAACC,OAAjB,EAA0B;AACtBC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKC,gBAAL,CAAsBT,WAAtB;AACH,SAHD,MAGO,IAAI,CAACK,YAAY,CAACC,OAAd,IAAyB,CAACD,YAAY,CAACK,YAA3C,EAAyD;AAC5DH,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAG,UAAAA,MAAM,CAACC,CAAP,CAAS,cAAT,EAAyBC,KAAzB,CAA+B,MAA/B;AACH;AACJ,OAVL,EAWKC,KAXL,CAWWC,KAAK,IAAI;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CO,KAA/C;AACH,OAbL;AAcH,KA1CsB;;AAAA,SA4CvBN,gBA5CuB,GA4CJT,WAAW,IAAI;AAC9B,UAAIgB,kBAAkB,GAAG,CAAC,GAAG,KAAKtB,KAAL,CAAWC,UAAf,CAAzB;AACAqB,MAAAA,kBAAkB,CAACC,OAAnB,CAA4BC,QAAD,IAAc;AACrC,YAAIA,QAAQ,CAACC,EAAT,KAAgBnB,WAApB,EAAiC;AAC7BkB,UAAAA,QAAQ,CAACE,aAAT,GAAyB,CAACF,QAAQ,CAACE,aAAnC;;AACA,cAAIF,QAAQ,CAACE,aAAb,EAA4B;AACxBF,YAAAA,QAAQ,CAACG,sBAAT;AACH,WAFD,MAEO;AACHH,YAAAA,QAAQ,CAACG,sBAAT;AACH;AACJ;AACJ,OATD;AAWA,WAAKC,QAAL,CAAc;AACV3B,QAAAA,UAAU,EAAEqB;AADF,OAAd;AAGH,KA5DsB;;AAAA,SA8DvBO,UA9DuB,GA8DV3B,IAAI,IAAI;AACjB,WAAK0B,QAAL,CAAc;AACV1B,QAAAA,IAAI,EAAEA;AADI,OAAd;AAGH,KAlEsB;;AAAA,SAoEvB4B,YApEuB,GAoER1B,MAAM,IAAI;AACrB,WAAKwB,QAAL,CAAc;AACVzB,QAAAA,MAAM,EAAE;AACJC,UAAAA,MAAM,EAAEA;AADJ;AADE,OAAd;AAKH,KA1EsB;AAAA;;AAUvB2B,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,MAAM,GAAGf,MAAM,CAACgB,QAAP,CAAgBD,MAA/B,CADgB,CACsB;;AACtC,UAAME,MAAM,GAAG,IAAIC,eAAJ,CAAoBH,MAApB,CAAf,CAFgB,CAE2B;;AAC3C,UAAMI,SAAS,GAAGF,MAAM,CAACG,GAAP,CAAW,MAAX,CAAlB;AAEA9B,IAAAA,KAAK,CAAE,GAAET,SAAU,wCAAuCsC,SAAU,EAA/D,CAAL,CAAsE;AAAtE,KACK5B,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EACsC;AADtC,KAEKF,IAFL,CAEUG,YAAY,IAAI;AAClB,WAAKiB,QAAL,CAAc;AACV3B,QAAAA,UAAU,EAAEU;AADF,OAAd;AAGH,KANL,EAOKS,KAPL,CAOWC,KAAK,IAAI;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CO,KAA/C;AACH,KATL;AAUH;;AAmDDiB,EAAAA,MAAM,GAAG;AACL,QAAIrC,UAAU,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,UAAf,CAAjB,CADK,CAGL;;AACA,QAAI,KAAKD,KAAL,CAAWE,IAAX,KAAoB,MAAxB,EAAgC;AAC5B,UAAI,KAAKF,KAAL,CAAWE,IAAX,KAAoB,MAAxB,EAAgC;AAC5BD,QAAAA,UAAU,CAACC,IAAX,CAAgB,CAACqC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAArC;AACH,OAFD,MAEO;AACHxC,QAAAA,UAAU,CAACC,IAAX,CAAgB,CAACqC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAArC;AACH;AACJ,KAVI,CAYL;;;AACA,QAAI,KAAKzC,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,KAA6B,MAAjC,EAAyC;AACrCH,MAAAA,UAAU,GAAGA,UAAU,CAACE,MAAX,CAAkBqB,QAAQ,IACnCA,QAAQ,CAACpB,MAAT,KAAoB,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,MAD7B,CAAb;AAGH;;AAED,QAAIsC,cAAJ;;AACA,QAAIzC,UAAU,CAAC0C,MAAX,GAAoB,CAAxB,EAA2B;AACvBD,MAAAA,cAAc,GAAGzC,UAAU,CAAC2C,GAAX,CAAepB,QAAQ,iBACpC,QAAC,YAAD;AAEI,QAAA,QAAQ,EAAEA,QAFd;AAGI,QAAA,gBAAgB,EAAE,MAAM,KAAKnB,gBAAL,CAAsBmB,QAAQ,CAACC,EAA/B;AAH5B,SACSD,QAAQ,CAACC,EADlB;AAAA;AAAA;AAAA;AAAA,cADa,CAAjB;AAOH,KARD,MAQO;AACHiB,MAAAA,cAAc,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAAjB;AACH;;AAGD,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI,QAAC,SAAD;AACI,UAAA,WAAW,EAAE,KAAK1C,KAAL,CAAWE,IAD5B;AAEI,UAAA,UAAU,EAAE,KAAK2B,UAFrB;AAGI,UAAA,aAAa,EAAE,KAAK7B,KAAL,CAAWG;AAH9B;AAAA;AAAA;AAAA;AAAA,gBADJ,EAOKuC,cAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI,QAAC,WAAD;AACI,QAAA,aAAa,EAAE,KAAK1C,KAAL,CAAWG,MAD9B;AAEI,QAAA,YAAY,EAAE,KAAK2B;AAFvB;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA,oBADJ;AAkBH;;AA/HsB;;AAkI3B,eAAe/B,EAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport FilterBar from './FilterBar';\r\nimport FilterModal from './FilterModal';\r\nimport PropertyCard from './PropertyCard';\r\nimport NoProperty from './NoProperty';\r\nimport { base_path } from './utils.js';\r\n\r\nclass pg extends Component {\r\n\r\n    state = {\r\n        properties: [],\r\n        sort: \"none\",\r\n        filter: {\r\n            gender: \"none\"\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        const search = window.location.search;//return query string part of url including ?\r\n        const params = new URLSearchParams(search);//API to convert search query to object\r\n        const city_name = params.get('city');\r\n\r\n        fetch(`${base_path}/api/get_properties_by_city.php?city=${city_name}`)//API to fetch properties object it returns a promise\r\n            .then(response => response.json())//response.json() is an api which parse the response to object . it also returns a promise\r\n            .then(responseData => {\r\n                this.setState({\r\n                    properties: responseData\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log('Error fetching and parsing data', error);\r\n            });\r\n    }\r\n\r\n    toggleInterested = property_id => {\r\n        fetch(`${base_path}/api/toggle_interested.php?property_id=${property_id}`)\r\n            .then(response => response.json())\r\n            .then(responseData => {\r\n                if (responseData.success) {\r\n                    console.log('Success');\r\n                    this.updateInterested(property_id);\r\n                } else if (!responseData.success && !responseData.is_logged_in) {\r\n                    console.log('Not logged in!');\r\n                    window.$(\"#login-modal\").modal(\"show\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log('Error fetching and parsing data', error);\r\n            });\r\n    }\r\n\r\n    updateInterested = property_id => {\r\n        let updated_properties = [...this.state.properties];\r\n        updated_properties.forEach((property) => {\r\n            if (property.id === property_id) {\r\n                property.is_interested = !property.is_interested;\r\n                if (property.is_interested) {\r\n                    property.interested_users_count++;\r\n                } else {\r\n                    property.interested_users_count--;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            properties: updated_properties\r\n        });\r\n    }\r\n\r\n    updateSort = sort => {\r\n        this.setState({\r\n            sort: sort\r\n        });\r\n    }\r\n\r\n    updateFilter = gender => {\r\n        this.setState({\r\n            filter: {\r\n                gender: gender\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let properties = [...this.state.properties];\r\n\r\n        // Sorting\r\n        if (this.state.sort !== \"none\") {\r\n            if (this.state.sort === \"desc\") {\r\n                properties.sort((a, b) => b.rent - a.rent);\r\n            } else {\r\n                properties.sort((a, b) => a.rent - b.rent);\r\n            }\r\n        }\r\n\r\n        // Filter\r\n        if (this.state.filter.gender !== \"none\") {\r\n            properties = properties.filter(property =>\r\n                property.gender === this.state.filter.gender\r\n            );\r\n        }\r\n\r\n        let property_cards;\r\n        if (properties.length > 0) {\r\n            property_cards = properties.map(property =>\r\n                <PropertyCard\r\n                    key={property.id}\r\n                    property={property}\r\n                    toggleInterested={() => this.toggleInterested(property.id)}\r\n                />\r\n            );\r\n        } else {\r\n            property_cards = <NoProperty />;\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"page-container\">\r\n                    <FilterBar\r\n                        currentSort={this.state.sort}\r\n                        updateSort={this.updateSort}\r\n                        currentFilter={this.state.filter}\r\n                    />\r\n\r\n                    {property_cards}\r\n                </div>\r\n\r\n                <FilterModal\r\n                    currentFilter={this.state.filter}\r\n                    updateFilter={this.updateFilter}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default pg;"]},"metadata":{},"sourceType":"module"}